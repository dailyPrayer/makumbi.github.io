<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://jbake.org</link>
    <atom:link href="http://jbake.org/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Sun, 8 Jan 2017 12:53:47 -0500</pubDate>
    <lastBuildDate>Sun, 8 Jan 2017 12:53:47 -0500</lastBuildDate>

    <item>
      <title>Software Vulnerability - SQL Injection</title>
      <link>http://jbake.org/blog/2017/software-vulnerability-sql-injection.html</link>
      <pubDate>Sun, 8 Jan 2017 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2017/software-vulnerability-sql-injection.html</guid>
      	<description>
	&lt;p&gt;&lt;img src=&quot;/img/protect-against-sql-injection.png&quot; alt=&quot;insecure login&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this article I create a simple form to demonstrate insecure interaction between a java based component&lt;br/&gt;and the outside world explaining why the form poses as a vulnerability to the overall application.&lt;br/&gt;Finally, I show how to properly secure the application. &lt;/p&gt;
&lt;p&gt;A simple Java application is created with a simple login form that retrieves username and password using&lt;br/&gt;two JTextFields and storing them into the Derby Database.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/insecure-login.png&quot; alt=&quot;insecure login&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once login button is pressed username and password is sent to be stored the DB.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The simple login application does not take into account other software vulnerabilities.&lt;br/&gt;We’re only demonstrating SQL Injection vulnerability. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/insecure-login-storing.png&quot; alt=&quot;insecure login storing&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The application works great, but when we take a look under the hood we find that this application is vulnerable&lt;br/&gt;to SQL Injection attacks because SQL statements are not prepared and are dynamically storing data directly into&lt;br/&gt;the database. &lt;/p&gt;
&lt;h3&gt;Insecure Code&lt;/h3&gt;
&lt;hr/&gt;
&lt;pre&gt;&lt;code&gt; private static void insertUserInfor(String userName, String userPass)
    {
        try
        {
            createConnection();
            stmt = conn.createStatement();
            stmt.execute(&amp;quot;insert into &amp;quot; + tableName + &amp;quot; values (&amp;#39;&amp;quot; +
                    userName + &amp;quot;&amp;#39;, &amp;#39;&amp;quot; + userPass + &amp;quot;&amp;#39;)&amp;quot;);
            
            stmt.close();
        }
        catch (SQLException sqlExcept)
        {
            sqlExcept.printStackTrace();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SQL Injection attacks are the most prevent attacks to an application and inflicts the most damage exposing&lt;br/&gt;sensitive data. Injection attacks attempt to break into application databases by injecting malicious code,&lt;br/&gt;oftentimes in a form of SQL statements. They are often injected through form fields similar to the small&lt;br/&gt;application I created, but are also injected through uploads, 3rd party APIs, configuration files, input files etc. &lt;/p&gt;
&lt;h3&gt;Secured Code&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;The code snippet above shows the application retrieving username and password directly placing it into the SQL&lt;br/&gt;statement without validating or sanitizing the data. Essentially, the developer trusts the user not to&lt;br/&gt;inject malicious code. The user should never be trusted. Below I demonstrate how to properly prepare SQL statements&lt;br/&gt;in java. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private static void insertUserInfor(String userName, String userPass)
    {
        try
        { 
            // establish connection
            createConnection();
            String qTxt = &amp;quot;INSERT INTO &amp;quot; + tableName + &amp;quot;VALUES (?,?)&amp;quot;;
            prepStmt = conn.prepareStatement(qTxt);
            prepStmt.setString(1, userName);
            prepStmt.setString(1, userPass);
            
            prepStmt.close();
        }
        catch (SQLException sqlExcept)
        {
            sqlExcept.printStackTrace();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When SQL statements are prepared information received from the user is placed in a prepared statement and not directly&lt;br/&gt;into the SQL query, thus mitigating dynamic queries. &lt;/p&gt;
&lt;p&gt;In this demonstration, I have alluded to mention another measure to take in order to mitigate SQL Injection attacks,&lt;br/&gt;which is to validate and sanitize data retrieved from the user. As we’ve mentioned, the application cannot trust data&lt;br/&gt;from the outside world. Information must be validated for content, length, format, and other factors before use. &lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Fourth Post</title>
      <link>http://jbake.org/blog/2013/fourth-post.html</link>
      <pubDate>Thu, 17 Oct 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">blog/2013/fourth-post.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://example.org&quot; class=&quot;bare&quot;&gt;http://example.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://example.org&quot;&gt;Example.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu,
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus,
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In
consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Third Post</title>
      <link>http://jbake.org/blog/2013/third-post.html</link>
      <pubDate>Thu, 26 Sep 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">blog/2013/third-post.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://example.org&quot; class=&quot;bare&quot;&gt;http://example.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://example.org&quot;&gt;Example.org&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu,
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus,
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In
consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Second Post</title>
      <link>http://jbake.org/blog/2013/second-post.html</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">blog/2013/second-post.html</guid>
      	<description>
	&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://example.org&quot;&gt;http://example.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://example.org&quot;&gt;Example.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu,&lt;br/&gt;mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo&lt;br/&gt;ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet&lt;br/&gt;ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus,&lt;br/&gt;id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales. In&lt;br/&gt;consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere&lt;br/&gt;libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>First Post</title>
      <link>http://jbake.org/blog/2013/first-post.html</link>
      <pubDate>Wed, 24 Jul 2013 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">blog/2013/first-post.html</guid>
      	<description>
	
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel diam purus. Curabitur ut nisi lacus.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://example.org&quot;&gt;http://example.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://example.org&quot;&gt;Example.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nam id nisl quam. Donec a lorem sit amet libero pretium vulputate vel ut purus. Suspendisse leo arcu, 
mattis et imperdiet luctus, pulvinar vitae mi. Quisque fermentum sollicitudin feugiat. Mauris nec leo 
ligula. Vestibulum tristique odio ut risus ultricies a hendrerit quam iaculis. Duis tempor elit sit amet 
ligula vehicula et iaculis sem placerat. Fusce dictum, metus at volutpat lacinia, elit massa auctor risus, 
id auctor arcu enim eu augue. Donec ultrices turpis in mi imperdiet ac venenatis sapien sodales.&lt;/p&gt; 

&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;
package org.jbake;

public class Oven {
	public static void main(String[] args) {
		System.out.print(&quot;Baking!&quot;);
  }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;In consequat imperdiet nunc quis bibendum. Nulla semper, erat quis ornare tristique, lectus massa posuere 
libero, ut vehicula lectus nunc ut lorem. Aliquam erat volutpat.&lt;/p&gt;

	</description>
    </item>

  </channel> 
</rss>
